#!/bin/bash

log() {
  echo -e "\033[32m[INFO]\033[0m $1"
}

# 定义红色错误日志输出函数
error() {
  echo -e "\033[31m[ERROR]\033[0m $1"
}

# 检查当前用户是否有sudo权限
if ! sudo -v &> /dev/null; then
  error "Please run the script as a user with sudo privileges"
  exit 1
fi

# 定义函数用于询问是否需要替换镜像源，如果需要则替换
replace_mirror() {
  read -rp "Use USTC mirror as default for APT? [y/N]: " answer
  case $answer in
    [yY])
      log "Replacing the default mirror with USTC mirror..."
      sudo sed -i 's/http:\/\/archive.ubuntu.com/http:\/\/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
      sudo apt update
      log "Mirror replacement completed."
      ;;
    *)
      log "Keeping the default mirror."
      ;;
  esac
}

# 定义函数用于安装apt软件
install_packages() {
  log "Installing common components..."
  sudo apt install -y zsh tldr vim tmux curl wget openssl \
        build-essential gdb python3 python3-pip zsh-antigen # 这里可以添加其他需要安装的软件包
  log "Package installation completed."
}

# 定义函数用于配置代理环境变量
configure_proxy() {
  read -rp "Do you want to configure proxy environment variables? [y/N]: " answer
  case $answer in
    [yY])
      read -rp "Enter your proxy server URL: " proxy_url
      read -rp "Enter your proxy server port: " proxy_port
      # 设置ALL_PROXY环境变量，使得所有支持代理的应用程序都使用该代理服务器
      export ALL_PROXY="http://$proxy_url:$proxy_port"
      # 设置其他常见代理环境变量
      export http_proxy="$ALL_PROXY"
      export https_proxy="$ALL_PROXY"
      export ftp_proxy="$ALL_PROXY"
      log "Proxy environment variables configured."
      ;;
    *)
      log "Skipping proxy configuration."
      ;;
  esac
}

# 定义函数用于配置git全局用户名和邮箱
config_git() {
  read -rp "Do you want to configure git global username and email? [y/N]: " answer
  case $answer in
    [yY])
      read -rp "Enter your git username: " username
      read -rp "Enter your git email: " email
      git config --global user.name "$username"
      git config --global user.email "$email"
      log "Git global configuration completed."
      ;;
    *)
      log "Skipping git global configuration."
      ;;
  esac
}

# 定义函数用于解密加密文件
decrypt_files() {
  read -rp "Do you want to decrypt encrypted files using yadm? [y/N]: " answer
  case $answer in
    [yY])
      yadm decrypt # 这里可以添加其他需要解密的文件路径
      log "File decryption completed."
      ;;
    *)
      log "Skipping file decryption."
      ;;
  esac
}

# 主程序开始

# 询问是否要替换镜像源
replace_mirror

# 安装软件
install_packages

# 配置临时代理环境变量
configure_proxy

# 配置git全局用户名和邮箱
config_git

# 解密加密文件
decrypt_files

log "Bootstrap script completed."

# 更改默认shell为zsh
if [ "$SHELL" = "/bin/zsh" ]; then
  log "Zsh is already the default shell."
else
  log "Changing the shell to zsh."
  if chsh -s $(which zsh); then
    # 输出绿色信息表示成功更改默认shell
    log "Default shell changed to zsh."
    # 重新启动shell以使更改生效
    exec -l $SHELL
  else
    # 输出红色信息表示更改默认shell失败
    error "Failed to change default shell. Please try again later."
  fi
fi
